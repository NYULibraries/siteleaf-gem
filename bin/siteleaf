#!/usr/bin/env ruby

require 'siteleaf'
require 'fileutils'
require 'open-uri'
require 'digest/md5'
require_relative 'help'
require_relative 'authenticate'
require_relative 'configure'
require_relative 'pull'
require_relative 'push'
require_relative 'publish'

def fetch_site_id_config
  return nil unless File.exist?('config.ru')
  match = /:site_id => '([a-z0-9]{24})'/i.match(File.read('config.ru'))
  return match[1] unless match.nil?
  nil
end

def sever_command
  if File.exist?('config.ru')
    port = ARGV[2] if %w[-p --port].include?(ARGV[1]) && ARGV[1]
    `rackup config.ru -p #{port || '9292'} >&2`
  else
    puts "No config found, run `siteleaf config yoursite.com`.\n"
  end
end

def config_command
  if auth != false
    if site = Siteleaf::Site.find_by_domain(ARGV[1])
      config site
    else
      puts "No site found for `#{ARGV[1]}`, run `siteleaf new #{ARGV[1]}` to create it.\n"
    end
  end
end

def new_command
  if auth != false
    if (site = Siteleaf::Site.create(:title => ARGV[1], :domain => ARGV[1])) && (!site.error)
      dir = ARGV.size >= 3 ? ARGV[2] : ARGV[1]
      Dir.mkdir(dir) unless File.directory?(dir)
      Dir.chdir(dir)
      config site
    else
      puts "Could not create site `#{ARGV[1]}`.\n"
    end
  end
end

def pull_command
  case ARGV[1]
  when 'theme'
    if auth != false
      if site_id = fetch_site_id_config
        get_theme_assets(site_id)
      else
        puts "Site not configured, run `siteleaf config yoursite.com`.\n"
      end
    end
  else
    puts "`#{ARGV[0]}` command not found.\n"
  end
end

def push_command
  case ARGV[1]
  when 'theme'
    if auth != false
      if site_id = fetch_site_id_config
        put_theme_assets(site_id)
      else
        puts "Site not configured, run `siteleaf config yoursite.com`.\n"
      end
    end
  else
    puts "`#{ARGV[0]}` command not found.\n"
  end
end

def publish_command
   if auth != false
    quiet = %w[-q --quiet].include?(ARGV[1]) && ARGV[1]
    if site_id = fetch_site_id_config
      publish(site_id, quiet)
    else
      puts "Site not configured, run `siteleaf config yoursite.com`.\n"
    end
  end
end

case ARGV[0]
when '-v', '--version', 'version'
  puts Siteleaf::VERSION
when '-h', '--help', 'help'
  puts help
when 's', 'server'
  sever_command
when 'auth'
  auth true
when 'c', 'config', 'setup'
  config_command
when 'n', 'new'
  new_command
when 'pull'
  pull_command
when 'push'
  push_command
when 'publish'
  publish_command
else
  puts "`#{ARGV[0]}` command not found.\n"
  puts help
end
