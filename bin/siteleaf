#!/usr/bin/env ruby

require 'siteleaf'
require 'fileutils'
require 'open-uri'
require 'digest/md5'
require_relative 'authenticate'
require_relative 'configure'
require_relative 'common'
require_relative 'help'
require_relative 'pull'
require_relative 'push'
require_relative 'publish'

# Provides functions for each SiteLeaf Command-line statement
module SiteleafCommands
  def sever_command
    if File.exist?('config.ru')
      port = ARGV[2] if %w(-p --port).include?(ARGV[1]) && ARGV[1]
      `rackup config.ru -p #{port || '9292'} >&2`
    else
      puts "No config found, run `siteleaf config yoursite.com`.\n"
    end
  end

  def config_command
    return unless Common.authenticated?
    if !(site = Siteleaf::Site.find_by_domain(ARGV[1])).nil?
      Config.config site
    else
      puts "No site found for `#{ARGV[1]}`, run `siteleaf new #{ARGV[1]}` to create it.\n"
    end
  end

  def new_command
    return unless Common.authenticated?
    if (site = Siteleaf::Site.create(title: ARGV[1], domain: ARGV[1])) && (!site.error)
      Common.configure_site(site)
    else
      puts "Could not create site `#{ARGV[1]}`.\n"
    end
  end

  def pull_command
    if ARGV[1] == 'theme'
      return unless Common.authenticated?
      site_id = Common.site_configured?
      return unless site_id
      get_theme_assets(site_id)
    else
      puts "`#{ARGV[0]}` command not found.\n"
    end
  end

  def push_command
    if ARGV[1] == 'theme'
      return unless Common.authenticated?
      site_id = Common.site_configured?
      return unless site_id
      put_theme_assets(site_id)
    else
      puts "`#{ARGV[0]}` command not found.\n"
    end
  end

  def publish_command
    return unless Common.authenticated?
    quiet = %w(-q --quiet).include?(ARGV[1]) && ARGV[1]
    site_id = Common.site_configured?
    return unless site_id
    Publish.publish(site_id, quiet)
  end
end

case ARGV[0]
when '-v', '--version', 'version'
  puts Siteleaf::VERSION
when '-h', '--help', 'help'
  puts Help.help
when 's', 'server'
  SiteleafCommands.sever_command
when 'auth'
  Authenticate.auth true
when 'c', 'config', 'setup'
  SiteleafCommands.config_command
when 'n', 'new'
  SiteleafCommands.new_command
when 'pull'
  SiteleafCommands.pull_command
when 'push'
  SiteleafCommands.push_command
when 'publish'
  SiteleafCommands.publish_command
else
  puts "`#{ARGV[0]}` command not found.\n"
  puts Help.help
end
