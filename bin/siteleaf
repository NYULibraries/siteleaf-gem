#!/usr/bin/env ruby

require 'siteleaf'
require 'fileutils'
require 'open-uri'
require 'digest/md5'
require_relative 'help'
require_relative 'authenticate'
require_relative 'configure'

def get_site_id
  if File.exist?('config.ru')
    if match = /:site_id => '([a-z0-9]{24})'/i.match(File.read('config.ru'))
      return match[1]
    end
  end
end

def get_theme_assets(site_id)
  if assets = Siteleaf::Theme.assets_by_site_id(site_id)
    updated_count = 0
    assets.each do |asset|
      if File.exist?(asset.filename) && (asset.checksum == Digest::MD5.hexdigest(File.read(asset.filename)))
        # file is up to date
      else
        print "Downloading #{asset.filename}..."
        file = open(asset.file['url'], /^1\.8/.match(RUBY_VERSION) ? 'r' : 'r:UTF-8') { |f| f.read }
        FileUtils.mkdir_p(File.dirname(asset.filename))
        File.open(asset.filename, /^1\.8/.match(RUBY_VERSION) ? 'w' : 'w:UTF-8') { |f| f.write(file) }
        updated_count += 1
        print "complete.\n"
      end
    end
    puts "=> #{updated_count} asset(s) downloaded.\n"
  end
end

def put_theme_assets(site_id)
  theme = Siteleaf::Theme.find_by_site_id(site_id)
  assets = theme.assets
  updated_count = 0
  ignore_paths = ['config.ru', '.*']
  ignore_paths += File.read('.siteleafignore').split(/\r?\n/) if File.exists?('.siteleafignore')

  # upload files
  paths = Dir.glob("**/*")
  paths.each do |path|
    if !File.directory?(path) && !ignore_paths.any?{|i| File.fnmatch?(i, path, File::FNM_CASEFOLD) || File.fnmatch?(i, File.basename(path), File::FNM_CASEFOLD) }
      asset = assets.find{|a| a.filename == path }
      if asset.nil? || (asset && asset.checksum != Digest::MD5.hexdigest(File.read(path)))
        print "Uploading #{path}..."
        asset.delete if asset
        if response = Siteleaf::Asset.create({:site_id => site_id, :theme_id => theme.id, :file => File.new(path), :filename => path})
          updated_count += 1
          print "complete.\n"
        else
          print "error.\n"
          break
        end
      end
    end
  end

  # check for old files
  missing_assets = []
  assets.each do |asset|
    missing_assets << asset if !paths.include?(asset.filename)
  end
  if missing_assets.empty?
    puts "=> #{updated_count} asset(s) uploaded.\n"
  else
    print "=> #{updated_count} asset(s) uploaded. Delete the following #{missing_assets.size} unmatched asset(s)?\n"
    missing_assets.each do |asset|
      puts asset.filename
    end
    print '(y/n)? '
    if $stdin.gets.chomp == 'y'
      missing_assets.each do |asset|
        print "Deleting #{asset.filename}..."
        asset.delete
        print "complete.\n"
      end
      puts "=> #{missing_assets.size} asset(s) deleted.\n"
    end
  end
end

def publish(site_id, quiet = true)
  site = Siteleaf::Site.new(id: site_id)
  job = site.publish

  if quiet
    puts "=> Publish queued.\n"
  else
    last_msg = nil
    job.stream do |s|
      if (msg = s["message"]) && (msg != last_msg)
        puts msg
        last_msg = msg
      end
    end
    puts "=> Publish completed.\n"
  end
end

case ARGV[0]
when '-v', '--version', 'version'
  puts Siteleaf::VERSION
when '-h', '--help', 'help'
  puts help
when 's', 'server'
  if File.exist?('config.ru')
    port = ARGV[2] if %w[-p --port].include?(ARGV[1]) && ARGV[1]
    `rackup config.ru -p #{port || '9292'} >&2`
  else
    puts "No config found, run `siteleaf config yoursite.com`.\n"
  end
when 'auth'
  auth true
when 'c', 'config', 'setup'
  if auth != false
    if site = Siteleaf::Site.find_by_domain(ARGV[1])
      config site
    else
      puts "No site found for `#{ARGV[1]}`, run `siteleaf new #{ARGV[1]}` to create it.\n"
    end
  end
when 'n', 'new'
  if auth != false
    if (site = Siteleaf::Site.create(:title => ARGV[1], :domain => ARGV[1])) && (!site.error)
      dir = ARGV.size >= 3 ? ARGV[2] : ARGV[1]
      Dir.mkdir(dir) unless File.directory?(dir)
      Dir.chdir(dir)
      config site
    else
      puts "Could not create site `#{ARGV[1]}`.\n"
    end
  end
when 'pull'
  case ARGV[1]
  when 'theme'
    if auth != false
      if site_id = get_site_id
        get_theme_assets(site_id)
      else
        puts "Site not configured, run `siteleaf config yoursite.com`.\n"
      end
    end
  else
    puts "`#{ARGV[0]}` command not found.\n"
  end
when 'push'
  case ARGV[1]
  when 'theme'
    if auth != false
      if site_id = get_site_id
        put_theme_assets(site_id)
      else
        puts "Site not configured, run `siteleaf config yoursite.com`.\n"
      end
    end
  else
    puts "`#{ARGV[0]}` command not found.\n"
  end
when 'publish'
  if auth != false
    quiet = %w[-q --quiet].include?(ARGV[1]) && ARGV[1]
    if site_id = get_site_id
      publish(site_id, quiet)
    else
      puts "Site not configured, run `siteleaf config yoursite.com`.\n"
    end
  end
else
  puts "`#{ARGV[0]}` command not found.\n"
  puts help
end
